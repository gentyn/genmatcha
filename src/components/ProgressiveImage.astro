---
interface Props {
  src: string;
  alt: string;
  className?: string;
  style?: string;
  width?: number;
  height?: number;
  priority?: boolean;
  placeholder?: string;
  objectFit?: 'cover' | 'contain' | 'fill' | 'none' | 'scale-down';
  context?: string; // For analytics tracking
  thumbnail?: boolean; // Whether to use thumbnail version
  thumbnailContext?: 'card' | 'gallery' | 'modal_thumbnail' | 'headshot'; // Context for thumbnail sizing
}

const { 
  src, 
  alt, 
  className = "", 
  style = "", 
  width, 
  height, 
  priority = false,
  placeholder = "",
  objectFit = "cover",
  context = "general",
  thumbnail = false,
  thumbnailContext = "card"
} = Astro.props;

// Generate a unique ID for this image
const imageId = `progressive-image-${Math.random().toString(36).substr(2, 9)}`;

// Generate optimized src for thumbnails
const optimizedSrc = thumbnail ? generateThumbnailUrl(src, thumbnailContext) : src;

function generateThumbnailUrl(originalSrc: string, context: 'card' | 'gallery' | 'modal_thumbnail' | 'headshot'): string {
  // First, try to use actual thumbnail files
  const url = new URL(originalSrc, 'http://localhost');
  const pathParts = url.pathname.split('/');
  const fileName = pathParts.pop();
  const extension = fileName?.split('.').pop();
  const baseName = fileName?.replace(`.${extension}`, '');
  
  if (fileName && baseName && extension) {
    // Check if thumbnail file exists by constructing the path
    const thumbnailPath = pathParts.join('/') + '/thumbnails/' + baseName + '_' + context + '.' + extension;
    
    // For now, we'll use the thumbnail path. In a real implementation,
    // you might want to check if the file actually exists
    if (thumbnailPath.includes('/thumbnails/')) {
      return thumbnailPath;
    }
  }
  
  // Fallback to query parameters for image optimization
  // In production, you might use a CDN or image service that supports these parameters
  const separator = originalSrc.includes('?') ? '&' : '?';
  
  switch (context) {
    case 'card':
      return `${originalSrc}${separator}w=600&h=384&fit=crop&q=85&fmt=webp`;
    case 'gallery':
      return `${originalSrc}${separator}w=400&h=300&fit=crop&q=85&fmt=webp`;
    case 'modal_thumbnail':
      return `${originalSrc}${separator}w=200&h=128&fit=crop&q=80&fmt=webp`;
    case 'headshot':
      return `${originalSrc}${separator}w=192&h=192&fit=crop&q=85&fmt=webp`;
    default:
      return originalSrc;
  }
}
---

<div class={`progressive-image-container relative ${className}`} style={style}>
  <!-- Skeleton Loading State -->
  <div 
    class="progressive-skeleton absolute inset-0 animate-pulse rounded-lg"
    data-skeleton-for={imageId}
  ></div>
  
  <!-- Low-quality placeholder (if provided) -->
  {placeholder && (
    <img 
      src={placeholder}
      alt=""
      class="absolute inset-0 w-full h-full rounded-lg blur-sm scale-105"
      data-placeholder-for={imageId}
      aria-hidden="true"
      style={`object-fit: ${objectFit};`}
    />
  )}
  
  <!-- Main Image -->
  <img 
    id={imageId}
    src={optimizedSrc}
    alt={alt}
    class="progressive-main-image w-full h-full rounded-lg relative z-10 opacity-0 transition-opacity duration-300 cursor-pointer"
    loading={priority ? "eager" : "lazy"}
    width={width}
    height={height}
    data-src={src}
    data-context={context}
    data-thumbnail={thumbnail}
    style={`object-fit: ${objectFit};`}
  />
</div>

<style>
  .progressive-image-container {
    overflow: hidden;
  }

  .progressive-main-image {
    transition: opacity 0.3s ease, transform 0.2s ease;
  }

  .progressive-main-image.loaded {
    opacity: 1;
  }

  .progressive-main-image:hover {
    transform: scale(1.02);
  }

  /* Enhanced skeleton loading animations */
  .progressive-skeleton {
    background: linear-gradient(90deg, #F0F0E8 25%, #E8E8E0 50%, #F0F0E8 75%);
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
  }

  .dark .progressive-skeleton {
    background: linear-gradient(90deg, #262926 25%, #2A2D2A 50%, #262926 75%);
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
  }

  @keyframes shimmer {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }

  /* Blur-up effect for placeholders */
  .progressive-image-container img[data-placeholder-for] {
    filter: blur(10px);
    transform: scale(1.1);
  }
</style>

<script>
  // Analytics tracking functions
  function trackImageEvent(eventName: string, imageSrc: string, context: string) {
    if (typeof window !== 'undefined' && typeof window.umami !== 'undefined') {
      window.umami.track(eventName, {
        image_src: imageSrc,
        context: context
      });
      console.log('Tracked image event:', eventName, { image_src: imageSrc, context });
    }
  }

  class ProgressiveImageLoader {
    private observer: IntersectionObserver | null = null;

    constructor() {
      this.init();
    }

    init(): void {
      // Use Intersection Observer for better performance
      if ('IntersectionObserver' in window) {
        this.observer = new IntersectionObserver(
          (entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                this.loadImage(entry.target as HTMLImageElement);
                this.observer?.unobserve(entry.target);
              }
            });
          },
          {
            rootMargin: '50px 0px',
            threshold: 0.1
          }
        );

        // Observe all progressive images
        document.querySelectorAll('.progressive-main-image').forEach(img => {
          this.observer?.observe(img);
        });
      } else {
        // Fallback for older browsers
        this.loadAllImages();
      }

      // Add click tracking for images
      this.addClickTracking();
    }

    addClickTracking(): void {
      document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        const img = target.closest('.progressive-main-image') as HTMLImageElement;
        if (img) {
          const imageSrc = img.src || img.dataset.src || '';
          const context = img.dataset.context || 'general';
          trackImageEvent('image_click', imageSrc, context);
        }
      });
    }

    loadImage(img: HTMLImageElement): void {
      const imageId = img.id;
      const skeleton = document.querySelector(`[data-skeleton-for="${imageId}"]`) as HTMLElement;
      const placeholder = document.querySelector(`[data-placeholder-for="${imageId}"]`) as HTMLImageElement;
      const imageSrc = img.src || img.dataset.src || '';
      const context = img.dataset.context || 'general';
      
      // If image is already loaded, show it immediately
      if (img.complete && img.naturalHeight !== 0) {
        this.showImage(img, skeleton, placeholder, imageSrc, context);
        return;
      }

      // Load the image
      img.onload = () => {
        this.showImage(img, skeleton, placeholder, imageSrc, context);
      };

      img.onerror = () => {
        this.handleError(img, skeleton, placeholder, imageSrc, context);
      };

      // Trigger load if src is already set
      if (img.src) {
        img.dispatchEvent(new Event('load'));
      }
    }

    showImage(img: HTMLImageElement, skeleton: HTMLElement | null, placeholder: HTMLImageElement | null, imageSrc: string, context: string): void {
      // Add loaded class for smooth transition
      img.classList.add('loaded');
      
      // Track successful image load
      trackImageEvent('image_load', imageSrc, context);
      
      // Hide skeleton and placeholder after a short delay
      setTimeout(() => {
        if (skeleton) skeleton.style.display = 'none';
        if (placeholder) placeholder.style.display = 'none';
      }, 300);
    }

    handleError(img: HTMLImageElement, skeleton: HTMLElement | null, placeholder: HTMLImageElement | null, imageSrc: string, context: string): void {
      // Hide skeleton and placeholder on error
      if (skeleton) skeleton.style.display = 'none';
      if (placeholder) placeholder.style.display = 'none';
      
      // Track image error
      trackImageEvent('image_error', imageSrc, context);
      
      // Add error styling
      img.style.opacity = '0.5';
      img.style.filter = 'grayscale(100%)';
    }

    loadAllImages(): void {
      // Fallback: load all images immediately
      document.querySelectorAll('.progressive-main-image').forEach(img => {
        this.loadImage(img as HTMLImageElement);
      });
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new ProgressiveImageLoader();
  });

  // Also initialize for dynamically added content
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new ProgressiveImageLoader();
    });
  } else {
    new ProgressiveImageLoader();
  }
</script> 