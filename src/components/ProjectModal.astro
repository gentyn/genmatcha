---
import VideoPlayer from './VideoPlayer.astro';
import ContentBlock from './ContentBlock.astro';

interface Props {
  projectId: string;
  title: string;
  description?: string;
  details?: string[];
  technologies: string[];
  images: string[];
  video?: string;
  videoPoster?: string;
  demoUrl?: string;
  githubUrl?: string;
  contentBlocks?: any[];
}

const { 
  projectId, 
  title, 
  description, 
  details, 
  technologies, 
  images,
  video,
  videoPoster,
  demoUrl, 
  githubUrl,
  contentBlocks
} = Astro.props;
---

<div id={`modal-${projectId}`} class="hidden fixed inset-0 bg-black/50 z-50">
  <div class="modal-content bg-[#F0F0E8] dark:bg-[#262926] max-w-4xl mx-auto mt-4 md:mt-20 rounded-lg shadow-xl">
    <div class="p-4 md:p-6">
      <div class="flex justify-between items-start">
        <h3 class="text-xl md:text-2xl font-bold text-[#1F1F1F] dark:text-[#EDEDE6]">{title}</h3>
        <button 
          class="close-modal text-2xl text-[#4C4C4C] dark:text-[#B0B0A8] hover:text-[#1F1F1F] dark:hover:text-[#EDEDE6]"
          aria-label="Close modal"
        >
          Ã—
        </button>
      </div>
      
      <!-- Media Toggle and Gallery -->
      <div class="mt-4">
        {video && (
          <div class="flex justify-center mb-4">
            <button 
              class="media-toggle px-4 py-2 bg-[#91B77F] dark:bg-[#A1C28F] text-[#1F1F1F] rounded hover:bg-[#7DA867] dark:hover:bg-[#8CAF78] transition-colors"
              data-media="video"
            >
              Video
            </button>
            <button 
              class="media-toggle px-4 py-2 border border-[#91B77F] dark:border-[#A1C28F] text-[#1F1F1F] dark:text-[#EDEDE6] rounded hover:bg-[#91B77F]/10 dark:hover:bg-[#A1C28F]/10 transition-colors ml-2"
              data-media="images"
            >
              Images
            </button>
          </div>
        )}

        <!-- Video Section -->
        {video && (
          <div id={`video-section-${projectId}`} class="video-section">
            <VideoPlayer 
              src={video} 
              poster={videoPoster} 
              title={`${title} demo video`}
              className="mb-4"
            />
          </div>
        )}

        <!-- Image Gallery Section -->
        <div id={`image-section-${projectId}`} class={`image-section ${video ? 'hidden' : ''}`}>
          <div class="main-image-container mb-4">
            <div class="image-loading-skeleton hidden absolute inset-0 bg-gray-200 dark:bg-gray-700 animate-pulse rounded-lg"></div>
            <img 
              src={images[0]} 
              alt={`${title} main image`} 
              class="w-full rounded-lg"
              style="height: 70vh; object-fit: contain;"
              loading="lazy"
              onload="this.previousElementSibling.classList.add('hidden')"
              onerror="this.previousElementSibling.classList.add('hidden')"
            />
          </div>
          {images.length > 1 && (
            <div class="thumbnail-grid grid grid-cols-4 gap-2 mt-2">
              {images.map((image, index) => (
                <div class="relative">
                  <div class="thumbnail-loading-skeleton absolute inset-0 bg-gray-200 dark:bg-gray-700 animate-pulse rounded"></div>
                  <img 
                    src={image} 
                    alt={`${title} thumbnail ${index + 1}`}
                    class="w-full h-32 object-cover rounded cursor-pointer hover:opacity-75 transition-opacity relative z-10"
                    data-index={index}
                    loading="lazy"
                    onload="this.previousElementSibling.classList.add('hidden')"
                    onerror="this.previousElementSibling.classList.add('hidden')"
                  />
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      <!-- Project Details -->
      <div class="mt-6">
        {contentBlocks ? (
          <>
            {contentBlocks.map((block, idx) => (
              <ContentBlock block={block} />
            ))}
          </>
        ) : (
          <>
            <h4 class="text-xl font-semibold text-[#1F1F1F] dark:text-[#EDEDE6]">Overview</h4>
            <p class="mt-2 text-[#4C4C4C] dark:text-[#B0B0A8]">{description}</p>
            <h4 class="text-xl font-semibold mt-4 text-[#1F1F1F] dark:text-[#EDEDE6]">Details</h4>
            <ul class="mt-2 list-disc list-inside text-[#4C4C4C] dark:text-[#B0B0A8] space-y-2">
              {details && details.map((detail) => (
                <li>{detail}</li>
              ))}
            </ul>
          </>
        )}

        <div class="mt-6 flex flex-wrap gap-2">
          {technologies.map((tech) => (
            <span class="px-3 py-1 bg-[#91B77F]/10 dark:bg-[#A1C28F]/10 text-[#1F1F1F] dark:text-[#EDEDE6] rounded-full text-sm">
              {tech}
            </span>
          ))}
        </div>

        {(demoUrl || githubUrl) && (
          <div class="mt-6 flex gap-4">
            {demoUrl && (
              <a 
                href={demoUrl} 
                target="_blank" 
                rel="noopener noreferrer"
                class="px-4 py-2 bg-[#91B77F] dark:bg-[#A1C28F] text-[#1F1F1F] rounded hover:bg-[#7DA867] dark:hover:bg-[#8CAF78] transition-colors"
              >
                Visit the Site!
              </a>
            )}
            {githubUrl && (
              <a 
                href={githubUrl} 
                target="_blank" 
                rel="noopener noreferrer"
                class="px-4 py-2 border border-[#91B77F] dark:border-[#A1C28F] text-[#1F1F1F] dark:text-[#EDEDE6] rounded hover:bg-[#91B77F]/10 dark:hover:bg-[#A1C28F]/10 transition-colors"
              >
                GitHub
              </a>
            )}
          </div>
        )}
      </div>
    </div>
  </div>
</div>

<style>
  .modal-content {
    max-height: 90vh;
    overflow-y: auto;
  }

  .main-image-container {
    display: flex;
    justify-content: center;
    align-items: center;
    background: #4C4C4C;
    border-radius: 0.5rem;
    overflow: hidden;
    height: 70vh;
    width: 100%;
    position: relative;
  }

  .main-image-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: url('/images/portfolio/Genesis.svg');
    background-repeat: repeat;
    background-size: 200px;
    opacity: 0.1;
    pointer-events: none;
  }

  .main-image-container img {
    max-width: 100%;
    height: 100%;
    width: auto;
    object-fit: contain;
    position: relative;
    z-index: 1;
  }

  .thumbnail-grid img {
    transition: transform 0.2s;
  }

  .thumbnail-grid img:hover {
    transform: scale(1.05);
  }

  /* Enhanced skeleton loading animations */
  .image-loading-skeleton,
  .thumbnail-loading-skeleton {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
  }

  .dark .image-loading-skeleton,
  .dark .thumbnail-loading-skeleton {
    background: linear-gradient(90deg, #374151 25%, #4b5563 50%, #374151 75%);
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
  }

  @keyframes shimmer {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }
</style>

<script>
  // Modal functionality
  document.addEventListener('DOMContentLoaded', () => {
    const modals = document.querySelectorAll('[id^="modal-"]');
    
    modals.forEach(modal => {
      const closeBtn = modal.querySelector('.close-modal');
      const thumbnails = modal.querySelectorAll('.thumbnail-grid img');
      const mainImage = modal.querySelector('.main-image-container img');
      const mediaToggles = modal.querySelectorAll('.media-toggle');
      const videoSection = modal.querySelector('.video-section');
      const imageSection = modal.querySelector('.image-section');
      const modalContent = modal.querySelector('.modal-content');
      
      // Store original focus element
      let originalFocusElement: HTMLElement | null = null;
      
      // Function to close modal
      const closeModal = () => {
        modal.classList.add('hidden');
        // Restore focus to original element
        if (originalFocusElement) {
          originalFocusElement.focus();
        }
        // Remove keyboard event listeners
        document.removeEventListener('keydown', handleKeydown);
      };
      
      // Keyboard event handler
      const handleKeydown = (e: KeyboardEvent) => {
        switch (e.key) {
          case 'Escape':
            e.preventDefault();
            closeModal();
            break;
          case 'ArrowLeft':
            e.preventDefault();
            navigateThumbnails(-1);
            break;
          case 'ArrowRight':
            e.preventDefault();
            navigateThumbnails(1);
            break;
          case 'Tab':
            // Trap focus within modal
            const focusableElements = modal.querySelectorAll(
              'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
            );
            const firstElement = focusableElements[0] as HTMLElement;
            const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;
            
            if (e.shiftKey) {
              if (document.activeElement === firstElement) {
                e.preventDefault();
                lastElement.focus();
              }
            } else {
              if (document.activeElement === lastElement) {
                e.preventDefault();
                firstElement.focus();
              }
            }
            break;
        }
      };
      
      // Thumbnail navigation function
      const navigateThumbnails = (direction: number) => {
        if (thumbnails.length === 0 || !mainImage) return;
        
        const currentIndex = Array.from(thumbnails).findIndex(thumb => 
          (thumb as HTMLImageElement).src === (mainImage as HTMLImageElement).src
        );
        const newIndex = (currentIndex + direction + thumbnails.length) % thumbnails.length;
        const targetThumb = thumbnails[newIndex] as HTMLImageElement;
        
        if (mainImage instanceof HTMLImageElement && targetThumb instanceof HTMLImageElement) {
          mainImage.src = targetThumb.src;
          mainImage.alt = targetThumb.alt;
          // Focus the thumbnail for accessibility
          targetThumb.focus();
        }
      };
      
      // Open modal function
      const openModal = () => {
        // Store current focus element
        originalFocusElement = document.activeElement as HTMLElement;
        
        modal.classList.remove('hidden');
        
        // Focus the close button for accessibility
        if (closeBtn) {
          (closeBtn as HTMLElement).focus();
        }
        
        // Add keyboard event listeners
        document.addEventListener('keydown', handleKeydown);
        
        // Reset modal scroll position
        if (modalContent) {
          (modalContent as HTMLElement).scrollTop = 0;
        }
        
        // Reset to first image
        if (mainImage && thumbnails.length > 0) {
          const firstThumb = thumbnails[0] as HTMLImageElement;
          if (mainImage instanceof HTMLImageElement && firstThumb instanceof HTMLImageElement) {
            mainImage.src = firstThumb.src;
            mainImage.alt = firstThumb.alt;
          }
        }
      };
      
      // Close modal
      closeBtn?.addEventListener('click', closeModal);
      
      // Close on outside click
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          closeModal();
        }
      });
      
      // Thumbnail click
      thumbnails.forEach(thumb => {
        thumb.addEventListener('click', () => {
          if (mainImage instanceof HTMLImageElement && thumb instanceof HTMLImageElement) {
            mainImage.src = thumb.src;
            mainImage.alt = thumb.alt;
          }
        });
        
        // Add keyboard support for thumbnails
        thumb.setAttribute('tabindex', '0');
        thumb.addEventListener('keydown', (e: Event) => {
          const keyboardEvent = e as KeyboardEvent;
          if (keyboardEvent.key === 'Enter' || keyboardEvent.key === ' ') {
            keyboardEvent.preventDefault();
            (thumb as HTMLElement).click();
          }
        });
      });

      // Media toggle
      mediaToggles.forEach(toggle => {
        toggle.addEventListener('click', () => {
          const mediaType = toggle.getAttribute('data-media');
          
          // Update button styles
          mediaToggles.forEach(t => {
            if (t.getAttribute('data-media') === mediaType) {
              t.classList.add('bg-[#91B77F]', 'dark:bg-[#A1C28F]', 'text-[#1F1F1F]');
              t.classList.remove('border', 'border-[#91B77F]', 'dark:border-[#A1C28F]', 'text-[#1F1F1F]', 'dark:text-[#EDEDE6]');
            } else {
              t.classList.remove('bg-[#91B77F]', 'dark:bg-[#A1C28F]', 'text-[#1F1F1F]');
              t.classList.add('border', 'border-[#91B77F]', 'dark:border-[#A1C28F]', 'text-[#1F1F1F]', 'dark:text-[#EDEDE6]');
            }
          });

          // Show/hide sections
          if (mediaType === 'video') {
            videoSection?.classList.remove('hidden');
            imageSection?.classList.add('hidden');
          } else {
            videoSection?.classList.add('hidden');
            imageSection?.classList.remove('hidden');
          }
        });
      });
      
      // Expose openModal function globally for project card clicks
      (window as any)[`openModal-${modal.id.replace('modal-', '')}`] = openModal;
    });
  });
</script> 